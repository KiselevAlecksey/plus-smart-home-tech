version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: analyzer
      POSTGRES_USER: password
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  kafka:
    image: confluentinc/confluent-local:7.4.3
    hostname: kafka
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      CLUSTER_ID: 'K0EA9p0yEe6MkAAAAkKsEg'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - app_network

  kafka-init-topics:
    image: confluentinc/confluent-local:7.4.3
    container_name: kafka-init-topics
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        until kafka-topics --bootstrap-server kafka:29092 --list; do sleep 1; done;
        kafka-topics --create --topic telemetry.sensors.v1
                    --partitions 1 --replication-factor 1 --if-not-exists
                    --bootstrap-server kafka:29092 &&
        kafka-topics --create --topic telemetry.snapshots.v1
                    --partitions 1 --replication-factor 1 --if-not-exists
                    --bootstrap-server kafka:29092 &&
        kafka-topics --create --topic telemetry.hubs.v1
                    --partitions 1 --replication-factor 1 --if-not-exists
                    --bootstrap-server kafka:29092
      "
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge